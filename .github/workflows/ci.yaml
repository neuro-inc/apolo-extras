name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

jobs:

  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Setup Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - name: Cache PyPI
        uses: actions/cache@v2
        with:
          key: pip-lint-${{ hashFiles('requirements/*.txt') }}
          path: ~/.cache/pip
          restore-keys: |
              pip-lint-
      - name: Install dependencies
        run: |
          python -m pip install twine wheel
          make setup
      - name: Run linters
        run: |
          make lint
      - name: Save the package version
        id: version
        run: |
          echo "::set-output name=version::$(python setup.py --version)"
      - name: Show version
        run: |
            echo ${{ steps.version.outputs.version }}

  pretest:
    name: Prepare for e2e tests
    needs: [lint]
    if: github.event_name != 'release'
    runs-on: ubuntu-latest
    env:
      NEURO_STAGING_URL: ${{ secrets.NEURO_STAGING_URL }}
      NEURO_TOKEN: ${{ secrets.NEURO_TOKEN }}
      NEURO_CLUSTER: neuro-compute
      DOCKER_SERVER: docker.io
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      # Note: ${{ github.sha }} not working, see https://github.com/actions/checkout/issues/299
      SHA: ${{ github.event.pull_request.head.sha || github.sha }}
    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Setup Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - name: Install and configure neuro
        run: |
          python -m pip install neuromation
          neuro config login-with-token ${{ env.NEURO_TOKEN }} ${{ env.NEURO_STAGING_URL }}
          neuro config switch-cluster ${{ env.NEURO_CLUSTER }}
          neuro config show
      - name: Configure docker
        run: |
          docker login $DOCKER_SERVER \
            --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
          neuro config docker
      - name: Build test image
        run: |
            export REPO_URL=https://github.com/neuro-inc/neuro-extras.git
            export PACKAGE="git+$REPO_URL@$SHA"
            docker build -t neuromation/neuro-extras:$SHA \
              --build-arg NEURO_EXTRAS_PACKAGE=$PACKAGE .
      - name: Push test image
        run: |
            neuro push neuromation/neuro-extras:$SHA image:neuromation/neuro-extras:$SHA

  test:
    name: Run e2e tests
    needs: [pretest]
    if: github.event_name != 'release'
    strategy:
      matrix:
        python-version: [3.6, 3.7]
        os: [ubuntu, macos, windows]
      fail-fast: false
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 10
    env:
      NEURO_STAGING_URL: ${{ secrets.NEURO_STAGING_URL }}
      NEURO_TOKEN: ${{ secrets.NEURO_TOKEN }}
      NEURO_CLUSTER: neuro-compute
      DOCKER_SERVER: docker.io
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      # Note: ${{ github.sha }} not working, see https://github.com/actions/checkout/issues/299
      NEURO_EXTRAS_IMAGE: image:neuromation/neuro-extras:${{ github.event.pull_request.head.sha || github.sha }}
    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Install python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"    # - name: dir
      - name: Cache PyPI
        uses: actions/cache@v2
        with:
          key: pip-ci-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py', 'requirements/*.txt') }}
          path: ${{ steps.pip-cache.outputs.dir }}
          restore-keys: |
              pip-ci-${{ runner.os }}-${{ matrix.python-version }}-
      - name: Install libraries on Linux
        if: matrix.os == 'ubuntu'
        shell: bash
        run: |
          curl https://rclone.org/install.sh | sudo bash
      - name: Install libraries on macOS
        if: matrix.os == 'macos'
        shell: bash
        run: |
          curl https://rclone.org/install.sh | sudo bash
      - name: Install python dependencies
        run: |
          make setup
      - name: Configure neuro
        run: |
          neuro config login-with-token ${{ env.NEURO_TOKEN }} ${{ env.NEURO_STAGING_URL }}
          neuro config switch-cluster ${{ env.NEURO_CLUSTER }}
          neuro config show
      - name: Configure GCP access
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.E2E_COOKIECUTTER_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.E2E_COOKIECUTTER_GCP_SA_KEY }}
          export_default_credentials: true
      - name: Configure AWS access
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.E2E_COOKIECUTTER_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.E2E_COOKIECUTTER_AWS_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Run e2e tests
        run: |
            echo "non-windows: NEURO_EXTRAS_IMAGE=$NEURO_EXTRAS_IMAGE"
            echo "windows:     NEURO_EXTRAS_IMAGE=%NEURO_EXTRAS_IMAGE%"
            make test_e2e


# TODO (yartem) Uncomment this step when neuro-image-delete is implemented
#  posttest:
#    name: Cleanup after successful e2e tests
#    needs: [test]
#    if: github.event_name != 'release'
#    runs-on: ubuntu-latest
#    env:
#      NEURO_STAGING_URL: ${{ secrets.NEURO_STAGING_URL }}
#      NEURO_TOKEN: ${{ secrets.NEURO_TOKEN }}
#      NEURO_CLUSTER: neuro-compute
#      # Note: ${{ github.sha }} not working, see https://github.com/actions/checkout/issues/299
#      NEURO_EXTRAS_IMAGE: image:neuromation/neuro-extras:${{ github.event.pull_request.head.sha || github.sha }}
#    steps:
#      - name: Setup Python 3.7
#        uses: actions/setup-python@v2
#        with:
#          python-version: "3.7"
#      - name: Install and configure neuro
#        run: |
#          python -m pip install neuromation
#          neuro config login-with-token ${{ env.NEURO_TOKEN }} ${{ env.NEURO_STAGING_URL }}
#          neuro config switch-cluster ${{ env.NEURO_CLUSTER }}
#          neuro config show
#      - name: Delete test image
#        run: |
#          neuro image delete $NEURO_EXTRAS_IMAGE


  devpi_deploy:
    name: Release package if needed
    runs-on: ubuntu-latest
    # needs: test  # we don't run tests before manual deploy
    if: github.event_name == 'release'
    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Sanity check for tag and version
        run: |
          export VERSION=${{ needs.lint.outputs.version }}
          if [ "${{ github.ref }}" != "refs/tags/v$VERSION" ]
          then
            echo "Git tag '${{ github.ref }}' != hard-coded package version '$VERSION'"
            exit 1
          else
            echo "OK, git tag matches hard-coded package version: '$VERSION'"
          fi
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - name: Install dependencies
        run: |
          python -m pip install twine wheel
          make setup
      - name: Make dists
        run: |
          python setup.py sdist bdist_wheel
      - name: PyPI upload
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*

  dockerhub_deploy:
    name: Release image if needed
    runs-on: ubuntu-latest
    needs: devpi_deploy
    if: github.event_name == 'release'
    env:
      DOCKER_SERVER: docker.io
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - name: Install dependencies
        run: |
          python -m pip install twine wheel
          make setup
      - name: Wait until package becomes available on PyPI
        timeout-minutes: 5
        run: |
          PYPIVERSION=$(python setup.py --version)
          PYPIPACKAGE=neuro-extras==$PYPIVERSION
          until python -m pip install $PYPIPACKAGE
          do
              echo "Waiting for the pypi package $PYPIPACKAGE..."
              sleep 1
          done
      - name: Build release image
        run: |
          export PACKAGE="neuro-extras==${{ needs.lint.outputs.version }}"

          docker build -t neuromation/neuro-extras:latest \
            --build-arg NEURO_EXTRAS_PACKAGE=$PACKAGE .
      - name: Push release release image
        run: |
          export TAG=v${{ needs.lint.outputs.version }}

          docker login $DOCKER_SERVER --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
          docker tag neuromation/neuro-extras:latest neuromation/neuro-extras:$TAG
          docker push neuromation/neuro-extras:$TAG
          # Push latest if it's not an alpha release:
          #   not alpha: TAG="v20.9.29"
          #   alpha: TAG="v20.9.29a1"
          if [[ ! "$TAG" =~ ^.*a[0-9]*$ ]]; then
            docker push neuromation/neuro-extras:latest
          fi
