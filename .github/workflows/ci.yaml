name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

jobs:

  debug:
    name: DEBUG
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v2
      - name: debug
        run: |
          echo head_ref=${{ github.head_ref }}
          echo base_ref=${{ github.base_ref }}
          echo ref=${{ github.ref }}
          echo sha=${{ github.sha }}

  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Setup Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - name: Cache PyPI
        uses: actions/cache@v2
        with:
          key: pip-lint-${{ hashFiles('requirements/*.txt') }}
          path: ~/.cache/pip
          restore-keys: |
              pip-lint-
      - name: Install dependencies
        run: |
          python -m pip install twine wheel
          make setup
      - name: Run linters
        run: |
          make lint
      - name: Save the package version
        id: version
        run: |
          echo "::set-output name=version::$(python setup.py --version)"
      - name: Show version
        run: |
            echo ${{ steps.version.outputs.version }}

  pretest:
    name: Prepare for e2e tests
    needs: [lint]
    if: github.event_name != 'release'
    runs-on: ubuntu-latest
    env:
      NEURO_STAGING_URL: ${{ secrets.NEURO_STAGING_URL }}
      NEURO_TOKEN: ${{ secrets.NEURO_TOKEN }}
      TEST_GITHUB_TOKEN: ${{ secrets.TEST_GITHUB_TOKEN }}
    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Build test image
        run: |
            export TAG=$(git log -1 --format='%H' origin/${{github.head_ref}})

            export REPO_URL=https://github.com/neuro-inc/neuro-extras.git
            export PACKAGE="git+$REPO_URL@$TAG"
            docker build -t neuromation/neuro-extras:latest \
              --build-arg NEURO_EXTRAS_PACKAGE="$PACKAGE" .

      - name: Push test image
        run: |
          export TAG=$(git log -1 --format='%H' origin/${{github.head_ref}})

          docker login $DOCKER_SERVER --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
          docker tag neuromation/neuro-extras:latest neuromation/neuro-extras:$TAG
          docker push neuromation/neuro-extras:$TAG

  test:
    name: Run e2e tests
    needs: [pretest]
    if: github.event_name != 'release'
    strategy:
      matrix:
        python-version: [3.6, 3.7]
        os: [ubuntu, macos, windows]
      fail-fast: false
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 10
    env:
      NEURO_STAGING_URL: ${{ secrets.NEURO_STAGING_URL }}
      NEURO_TOKEN: ${{ secrets.NEURO_TOKEN }}
      TEST_GITHUB_TOKEN: ${{ secrets.TEST_GITHUB_TOKEN }}
    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Install python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"    # - name: dir
      - name: Cache PyPI
        uses: actions/cache@v2
        with:
          key: pip-ci-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py', 'requirements/*.txt') }}
          path: ${{ steps.pip-cache.outputs.dir }}
          restore-keys: |
              pip-ci-${{ runner.os }}-${{ matrix.python-version }}-
      - name: Install libraries on Linux
        if: matrix.os == 'ubuntu'
        shell: bash
        run: |
          curl https://rclone.org/install.sh | sudo bash
      - name: Install libraries on macOS
        if: matrix.os == 'macos'
        shell: bash
        run: |
          curl https://rclone.org/install.sh | sudo bash
      - name: Install python dependencies
        run: |
          make setup
      - name: Configure neuro
        run: |
          neuro config login-with-token ${{ secrets.NEURO_TOKEN }} ${{ secrets.NEURO_STAGING_URL }}
          neuro config show
      - name: Configure GCP access
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.E2E_COOKIECUTTER_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.E2E_COOKIECUTTER_GCP_SA_KEY }}
          export_default_credentials: true
      - name: Configure AWS access
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.E2E_COOKIECUTTER_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.E2E_COOKIECUTTER_AWS_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Build test image
        run: |
            export TAG=$(git log -1 --format='%H' origin/${{github.head_ref}})

            export REPO_URL=https://github.com/neuro-inc/neuro-extras.git
            export PACKAGE="git+$REPO_URL@$TAG"
            docker build -t neuromation/neuro-extras:latest \
              --build-arg NEURO_EXTRAS_PACKAGE="$PACKAGE" .

      - name: Push test image
        run: |
          export TAG=$(git log -1 --format='%H' origin/${{github.head_ref}})
          
          docker login $DOCKER_SERVER --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
          docker tag neuromation/neuro-extras:latest neuromation/neuro-extras:$TAG
          docker push neuromation/neuro-extras:$TAG

      - name: Run e2e tests
        run: |
            export NEURO_EXTRAS_IMAGE_TAG=${GITHUB_SHA}
            make test_e2e


  devpi_deploy:
    name: Release package if needed
    runs-on: ubuntu-latest
    # needs: test  # we don't run tests before manual deploy
    if: github.event_name == 'release'
    steps:
      - name: Sanity check for tag and version
        run: |
          export VERSION=${{ needs.lint.outputs.version }}
          if [ "refs/tags/v$VERSION" != "${{ github.ref }}" ]
          then
            echo "Git tag '${{ github.ref }}' != hard-coded package version $VERSION"
            exit 1
          else
            echo "OK, git tag matches hard-coded package version: $VERSION"
          fi
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - name: Install dependencies
        run: |
          python -m pip install twine wheel
          make setup
      - name: Make dists
        run: |
          python setup.py sdist bdist_wheel
      - name: PyPI upload
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*

  dockerhub_deploy:
    name: Release image if needed
    runs-on: ubuntu-latest
    needs: devpi_deploy
    if: github.event_name == 'release'
    env:
      DOCKER_SERVER: docker.io
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - name: Install dependencies
        run: |
          python -m pip install twine wheel
          make setup
      - name: Wait until package becomes available on PyPI
        timeout-minutes: 5
        run: |
          PYPIVERSION=$(python setup.py --version)
          PYPIPACKAGE=neuro-extras==$PYPIVERSION
          until python -m pip install $PYPIPACKAGE
          do
              echo "Waiting for the pypi package $PYPIPACKAGE..."
              sleep 1
          done
      - name: Build release image
        run: |
          docker build -t neuromation/neuro-extras:latest \
            --build-arg NEURO_EXTRAS_VERSION="${{ needs.lint.outputs.version }}" .
      - name: Push release release image
        run: |
          export TAG=v${{ needs.lint.outputs.version }}

          docker login $DOCKER_SERVER --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
          docker tag neuromation/neuro-extras:latest neuromation/neuro-extras:$TAG
          docker push neuromation/neuro-extras:$TAG
          # Push latest if it's not an alpha release:
          #   not alpha: TAG="v20.9.29"
          #   alpha: TAG="v20.9.29a1"
          if [[ ! "$TAG" =~ ^.*a[0-9]*$ ]]; then
            docker push neuromation/neuro-extras:latest
          fi
