name: CD

on:
  release:
    types: [published]

jobs:
  info:
    name: Prepare release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    timeout-minutes: 5
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout commit
        uses: actions/checkout@v4
      - name: Setup Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Cache PyPI
        uses: actions/cache@v4
        with:
          key: pip-lint-${{ hashFiles('requirements/*.txt') }}
          path: ~/.cache/pip
          restore-keys: |
            pip-lint-
      - name: Install dependencies
        run: |
          python -m pip install pip
          make setup
      - name: Save the package version
        id: version
        run: |
          echo "version=$(python setup.py --version)" >> $GITHUB_OUTPUT
      - name: Show version
        run: |
          echo ${{ steps.version.outputs.version }}

  pypi_deploy:
    name: Release package
    runs-on: ubuntu-latest
    needs: [info]
    if: github.event_name == 'release'
    steps:
      - name: Checkout commit
        uses: actions/checkout@v4
      - name: Sanity check for tag and version
        run: |
          export VERSION=${{ needs.info.outputs.version }}
          if [ "${{ github.ref }}" != "refs/tags/v$VERSION" ]
          then
            echo "Git tag '${{ github.ref }}' differs from hard-coded package version 'v$VERSION'"
            exit 1
          else
            echo "OK, git tag matches hard-coded package version: 'v$VERSION'"
          fi
      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install twine wheel
          make setup
      - name: Make dists
        run: |
          python setup.py sdist bdist_wheel
      - name: PyPI upload
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*
      - name: Make neuro dists
        run: |
          rm -r dist build
          sed -i 's/apolo-extras/neuro-extras/g' setup.py
          python setup.py sdist bdist_wheel
      - name: PyPI upload
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_NEURO_TOKEN }}
        run: |
          twine upload dist/*

  dockerhub_deploy:
    name: Release image if needed
    runs-on: ubuntu-latest
    needs: [info, pypi_deploy]
    if: github.event_name == 'release'
    steps:
      - name: Checkout commit
        uses: actions/checkout@v4
      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install pip
          make setup
      - name: Wait until package becomes available on PyPI
        timeout-minutes: 5
        run: |
          PYPIVERSION=$(python setup.py --version)
          PYPIPACKAGE=apolo-extras==$PYPIVERSION
          until python -m pip install $PYPIPACKAGE
          do
              echo "Waiting for the pypi package $PYPIPACKAGE ..."
              sleep 1
          done
      - name: Build release image
        run: |
          export PACKAGE="apolo-extras==${{ needs.info.outputs.version }}"
          docker build -t ghcr.io/neuro-inc/apolo-extras:latest \
            --build-arg APOLO_EXTRAS_PACKAGE=$PACKAGE .
      - name: Login to ghcr.io
        uses: docker/login-action@v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push release release image
        id: push
        run: |
          export IMAGE=ghcr.io/neuro-inc/apolo-extras
          export TAG=${{ needs.info.outputs.version }}

          echo "image=${IMAGE}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

          docker tag $IMAGE:latest $IMAGE:$TAG
          docker push $IMAGE:$TAG
          # Push latest if it's not an alpha release:
          #   not alpha: TAG="20.9.29"
          #       alpha: TAG="20.9.29a1"
          if [[ ! "$TAG" =~ ^.*a[0-9]*$ ]]; then
            docker push $IMAGE:latest
          fi
      - name: Wait until image becomes available on DockerHub
        timeout-minutes: 10
        run: |
          export IMAGE=${{ steps.push.outputs.image }}
          export TAG=${{ steps.push.outputs.tag }}

          until docker pull --quiet $IMAGE:$TAG
          do
              echo "Waiting for the dockerhub image $IMAGE:$TAG ..."
              sleep 1
          done
